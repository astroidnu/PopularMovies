package com.example.android.popularmovies.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO".
*/
public class VideoDao extends AbstractDao<Video, Void> {

    public static final String TABLENAME = "VIDEO";

    /**
     * Properties of entity Video.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property Iso6391 = new Property(1, String.class, "iso6391", false, "ISO6391");
        public final static Property Iso31661 = new Property(2, String.class, "iso31661", false, "ISO31661");
        public final static Property Key = new Property(3, String.class, "key", false, "KEY");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Site = new Property(5, String.class, "site", false, "SITE");
        public final static Property Size = new Property(6, int.class, "size", false, "SIZE");
        public final static Property Type = new Property(7, String.class, "type", false, "TYPE");
    }


    public VideoDao(DaoConfig config) {
        super(config);
    }
    
    public VideoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO\" (" + //
                "\"ID\" TEXT," + // 0: id
                "\"ISO6391\" TEXT," + // 1: iso6391
                "\"ISO31661\" TEXT," + // 2: iso31661
                "\"KEY\" TEXT," + // 3: key
                "\"NAME\" TEXT," + // 4: name
                "\"SITE\" TEXT," + // 5: site
                "\"SIZE\" INTEGER NOT NULL ," + // 6: size
                "\"TYPE\" TEXT);"); // 7: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Video entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String iso6391 = entity.getIso6391();
        if (iso6391 != null) {
            stmt.bindString(2, iso6391);
        }
 
        String iso31661 = entity.getIso31661();
        if (iso31661 != null) {
            stmt.bindString(3, iso31661);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(4, key);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String site = entity.getSite();
        if (site != null) {
            stmt.bindString(6, site);
        }
        stmt.bindLong(7, entity.getSize());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(8, type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Video entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String iso6391 = entity.getIso6391();
        if (iso6391 != null) {
            stmt.bindString(2, iso6391);
        }
 
        String iso31661 = entity.getIso31661();
        if (iso31661 != null) {
            stmt.bindString(3, iso31661);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(4, key);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String site = entity.getSite();
        if (site != null) {
            stmt.bindString(6, site);
        }
        stmt.bindLong(7, entity.getSize());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(8, type);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Video readEntity(Cursor cursor, int offset) {
        Video entity = new Video( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // iso6391
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // iso31661
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // key
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // site
            cursor.getInt(offset + 6), // size
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Video entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIso6391(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIso31661(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setKey(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSite(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSize(cursor.getInt(offset + 6));
        entity.setType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Video entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Video entity) {
        return null;
    }

    @Override
    public boolean hasKey(Video entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
