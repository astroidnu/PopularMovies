package com.example.android.popularmovies.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MOVIE".
*/
public class MovieDao extends AbstractDao<Movie, Void> {

    public static final String TABLENAME = "MOVIE";

    /**
     * Properties of entity Movie.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property VoteCount = new Property(0, int.class, "voteCount", false, "VOTE_COUNT");
        public final static Property Id = new Property(1, int.class, "id", false, "ID");
        public final static Property Video = new Property(2, boolean.class, "video", false, "VIDEO");
        public final static Property VoteAverage = new Property(3, float.class, "voteAverage", false, "VOTE_AVERAGE");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property Popularity = new Property(5, float.class, "popularity", false, "POPULARITY");
        public final static Property PosterPath = new Property(6, String.class, "posterPath", false, "POSTER_PATH");
        public final static Property OriginalLanguage = new Property(7, String.class, "originalLanguage", false, "ORIGINAL_LANGUAGE");
        public final static Property OriginalTitle = new Property(8, String.class, "originalTitle", false, "ORIGINAL_TITLE");
        public final static Property BackdropPath = new Property(9, String.class, "backdropPath", false, "BACKDROP_PATH");
        public final static Property Adult = new Property(10, boolean.class, "adult", false, "ADULT");
        public final static Property Overview = new Property(11, String.class, "overview", false, "OVERVIEW");
        public final static Property ReleaseDate = new Property(12, String.class, "releaseDate", false, "RELEASE_DATE");
    }


    public MovieDao(DaoConfig config) {
        super(config);
    }
    
    public MovieDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MOVIE\" (" + //
                "\"VOTE_COUNT\" INTEGER NOT NULL ," + // 0: voteCount
                "\"ID\" INTEGER NOT NULL UNIQUE ," + // 1: id
                "\"VIDEO\" INTEGER NOT NULL ," + // 2: video
                "\"VOTE_AVERAGE\" REAL NOT NULL ," + // 3: voteAverage
                "\"TITLE\" TEXT," + // 4: title
                "\"POPULARITY\" REAL NOT NULL ," + // 5: popularity
                "\"POSTER_PATH\" TEXT," + // 6: posterPath
                "\"ORIGINAL_LANGUAGE\" TEXT," + // 7: originalLanguage
                "\"ORIGINAL_TITLE\" TEXT," + // 8: originalTitle
                "\"BACKDROP_PATH\" TEXT," + // 9: backdropPath
                "\"ADULT\" INTEGER NOT NULL ," + // 10: adult
                "\"OVERVIEW\" TEXT," + // 11: overview
                "\"RELEASE_DATE\" TEXT);"); // 12: releaseDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MOVIE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Movie entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getVoteCount());
        stmt.bindLong(2, entity.getId());
        stmt.bindLong(3, entity.getVideo() ? 1L: 0L);
        stmt.bindDouble(4, entity.getVoteAverage());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
        stmt.bindDouble(6, entity.getPopularity());
 
        String posterPath = entity.getPosterPath();
        if (posterPath != null) {
            stmt.bindString(7, posterPath);
        }
 
        String originalLanguage = entity.getOriginalLanguage();
        if (originalLanguage != null) {
            stmt.bindString(8, originalLanguage);
        }
 
        String originalTitle = entity.getOriginalTitle();
        if (originalTitle != null) {
            stmt.bindString(9, originalTitle);
        }
 
        String backdropPath = entity.getBackdropPath();
        if (backdropPath != null) {
            stmt.bindString(10, backdropPath);
        }
        stmt.bindLong(11, entity.getAdult() ? 1L: 0L);
 
        String overview = entity.getOverview();
        if (overview != null) {
            stmt.bindString(12, overview);
        }
 
        String releaseDate = entity.getReleaseDate();
        if (releaseDate != null) {
            stmt.bindString(13, releaseDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Movie entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getVoteCount());
        stmt.bindLong(2, entity.getId());
        stmt.bindLong(3, entity.getVideo() ? 1L: 0L);
        stmt.bindDouble(4, entity.getVoteAverage());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
        stmt.bindDouble(6, entity.getPopularity());
 
        String posterPath = entity.getPosterPath();
        if (posterPath != null) {
            stmt.bindString(7, posterPath);
        }
 
        String originalLanguage = entity.getOriginalLanguage();
        if (originalLanguage != null) {
            stmt.bindString(8, originalLanguage);
        }
 
        String originalTitle = entity.getOriginalTitle();
        if (originalTitle != null) {
            stmt.bindString(9, originalTitle);
        }
 
        String backdropPath = entity.getBackdropPath();
        if (backdropPath != null) {
            stmt.bindString(10, backdropPath);
        }
        stmt.bindLong(11, entity.getAdult() ? 1L: 0L);
 
        String overview = entity.getOverview();
        if (overview != null) {
            stmt.bindString(12, overview);
        }
 
        String releaseDate = entity.getReleaseDate();
        if (releaseDate != null) {
            stmt.bindString(13, releaseDate);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Movie readEntity(Cursor cursor, int offset) {
        Movie entity = new Movie( //
            cursor.getInt(offset + 0), // voteCount
            cursor.getInt(offset + 1), // id
            cursor.getShort(offset + 2) != 0, // video
            cursor.getFloat(offset + 3), // voteAverage
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.getFloat(offset + 5), // popularity
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // posterPath
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // originalLanguage
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // originalTitle
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // backdropPath
            cursor.getShort(offset + 10) != 0, // adult
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // overview
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // releaseDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Movie entity, int offset) {
        entity.setVoteCount(cursor.getInt(offset + 0));
        entity.setId(cursor.getInt(offset + 1));
        entity.setVideo(cursor.getShort(offset + 2) != 0);
        entity.setVoteAverage(cursor.getFloat(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPopularity(cursor.getFloat(offset + 5));
        entity.setPosterPath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOriginalLanguage(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOriginalTitle(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBackdropPath(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAdult(cursor.getShort(offset + 10) != 0);
        entity.setOverview(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setReleaseDate(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Movie entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Movie entity) {
        return null;
    }

    @Override
    public boolean hasKey(Movie entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
